random_seed = 0;                // Seed for random number generator; use 0 to base on time.

// Experiment parameters
Var print_step = 1;
Var num_gens = 768;
Var leading_edge_index = 0;
Var leading_edge_val = 10;
Var leading_edge_extras = 7;

// Momentum window bookkeeping vars
Var relative_update = 0;
Var global_update = 0;
Var was_successful = 0;
Var did_window_fail = 0;

Var old_peak = 6;
Var cur_peak = 12;
Var target_peak = 18;
Var old_fitness = 1;
Var cur_fitness = 2;
Var target_fitness = 3;


DataFile fit_file { filename="fitness.csv"; };
fit_file.ADD_COLUMN( "relative_update", "relative_update" );
fit_file.ADD_COLUMN( "global_update", "global_update" );
fit_file.ADD_COLUMN( "fitness_raw_mean", "main_pop.CALC_MEAN('fitness')" );
fit_file.ADD_COLUMN( "fitness_raw_max", "main_pop.CALC_MAX('fitness')" );
fit_file.ADD_COLUMN( "leading_edge_index", "leading_edge_index" );
fit_file.ADD_COLUMN( "leading_edge_val", "leading_edge_val" );
fit_file.ADD_COLUMN( "was_successful", "was_successful" );
fit_file.ADD_COLUMN( "did_window_fail", "did_window_fail" );

@START() {
  PRINT("=== CONFIGURATION ===");
  PRINT("  Mut Probability:  ", ints_org.mut_prob);
  PRINT("  Population size:  ", pop_size);
  PRINT("  Random seed:      ", random_seed);
  PRINT("  Leading edge index:  ", leading_edge_index);
  PRINT("  Leading edge val:  ", leading_edge_val);
  PRINT("  Extra leading edge orgs:  ", leading_edge_extras);
  
  Var tmp_counter = 0;
  WHILE(tmp_counter < pop_size){
    Var offset = leading_edge_index - tmp_counter;
    IF(offset > leading_edge_extras){
        main_pop.INJECT_GENOME("ints_org", "[ " + cur_peak + " ]", 1);
    }
    ELSE IF (offset <= leading_edge_extras && offset >= 0){
        main_pop.INJECT_GENOME("ints_org", "[ " + leading_edge_val + " ]", 1);
    }
    ELSE{
        main_pop.INJECT_GENOME("ints_org", "[ " + old_peak + " ]", 1);
    }
    tmp_counter = tmp_counter + 1;
  }
  relative_update = 0;
  global_update = leading_edge_index;
}

// Actions to perform every update.

@UPDATE(Var ud) {
  IF (global_update == num_gens){
    EXIT();
  } 

  sawtooth.EVAL(main_pop);
  
  IF (relative_update % print_step == 0) {
    fit_file.WRITE();
  }
  IF (main_pop.CALC_MAX("fitness") >= target_fitness){
    was_successful = 1;
    PRINT("Cross! Relative update: ", relative_update);
    relative_update = 0;
    target_fitness = target_fitness + 1;
  }
  IF (main_pop.CALC_MAX("fitness") <= old_fitness ){
    did_window_fail = 1;
  }
  
  select_r.SELECT_SPATIAL(main_pop, next_pop);
  main_pop.REPLACE_WITH(next_pop);

  relative_update = relative_update + 1;
  global_update = global_update + 1;
}
